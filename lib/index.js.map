{"version":3,"sources":["../src/index.js"],"names":["http","require","url","exec","iconv","decode","stream","v","HEADER","Object","freeze","WebHook","scripts","port","createServer","req","res","console","log","Date","toLocaleString","parsed","parse","pathname","query","result","writeHead","end","warn","listen","scriptTest","JSON","stringify","scriptShell","cmd","Promise","resolve","encoding","err","stdout","stderr","module","exports"],"mappings":"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","sourcesContent":["const http = require('http');\nconst url = require('url');\nconst { exec } = require('child_process');\nconst iconv = require('iconv-lite');\n\nconst decode = require('check-if-windows') ? stream => iconv.decode(stream, 'cp936') : v => v;\nconst HEADER = Object.freeze({\n  'Content-Type': 'text/plain; charset=utf-8',\n});\n\nclass WebHook {\n  // A simple webhook script for test.\n  static scriptTest = async (query) => {\n    console.log(`Webhook received. \\nParams: ${JSON.stringify(query)}`);\n  };\n\n  /**\n   * Web shell. Powerful but dangerous. Make sure that you know what you are doing.\n   * @param cmd {string} shell command\n   * @return {Promise<*|void>}\n   */\n  static scriptShell = async ({ cmd }) => {\n    if (cmd) {\n      console.log('CMD:', cmd);\n      return new Promise((resolve) => {\n        exec(cmd, { encoding: 'buffer' }, (err,stdout, stderr) => {\n          if(err){\n            console.warn(stderr);\n            resolve();\n          } else {\n            console.log(decode(stdout));\n            resolve();\n          }\n        });\n      });\n    } else {\n      console.log('CMD is required.');\n    }\n  };\n  constructor(scripts = {}, port = 5225) {\n    this.scripts = scripts;\n    this.port = port;\n  }\n  start() {\n    const { scripts, port } = this;\n    http.createServer(async function(req, res){\n      console.log(`\\n${new Date().toLocaleString()} ${req.url}`);\n      const parsed = url.parse(req.url, true);\n      const { pathname, query } = parsed;\n      if (scripts[pathname]) {\n        try {\n          const result = await scripts[pathname](query || {});\n          res.writeHead(200, HEADER);\n          res.end(typeof result === 'string'? result : 'Hook completed.');\n          console.log(200);\n        } catch (e) {\n          res.writeHead(502, HEADER);\n          res.end(`Error occured: ${e}`);\n          console.warn(502, e);\n        }\n      } else {\n        res.writeHead(404, HEADER);\n        res.end('Hook not found');\n        console.warn(404);\n      }\n\n    }).listen(port);\n    console.log(`Server started at port ${port}.`);\n  }\n}\n\nmodule.exports = WebHook;\n"],"file":"index.js"}